'''
YOU MAY RUN THIS CODE
'''




from tic_tac_toe_functions_part_2 import *









def TEST(description, expected_result, actual_result):
    print(description, end = ': ')
    if actual_result == expected_result:
        print('pass')
    else:
        print('FAIL')
        print('   Expected result:', expected_result)
        print('   Actual result:', actual_result)




'''
The draw_row & draw_board functions don't have tests,
they will be tested manually.
'''
# is_full function will be tested manually.

def find_winner_TEST():

   print('Start find_winner_TEST')

   # Column winners
   board = [[' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Column win', 'x', find_winner(board,'5E','1E'))

   board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o','o','o','o',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Column win', 'o', find_winner(board,'5B','5C'))

   # Row winners
   board = [[' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Row win', 'x', find_winner(board,'1C','2C'))

   board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Row win', 'o', find_winner(board,'2E','4E'))
   
   # No winners
   board = [[' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Nobody win', None, find_winner(board,'5EW','1E'))

   board = [[' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Nobody win', None, find_winner(board,'1E','2E'))

   board = [[' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Nobody win', None, find_winner(board,'1ER','2EW'))

   # Diagonal winners
   board = [[' ', ' ', ' ',' ',' ','x',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ','x',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
   TEST('Diagonal win', 'x', find_winner(board,'4C','5B'))

   board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['o', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'o',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ','o',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]    
   TEST('Diagonal win', 'o', find_winner(board,'3A','4B'))

   print('End find_winner_TEST')
   print()


def make_move_TEST(): 
    
    print('Start make_move_TEST')

    # Legal move
    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('accept legal move', True, make_move('o','4C',board))
    expected_board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('make legal move', expected_board, board)

    # Another legal move
    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o','o',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('accept legal move', True, make_move('x','3D',board))
    expected_board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', 'x','x',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o','o',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('make legal move', expected_board, board)

    # Invalid movement caused by incorrect format
    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    expected_board = board
    TEST('reject move, wrong case', 'format', make_move('x', '2a', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, no location', 'format', make_move('x', ' ', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, wrong order', 'format', make_move('x', 'A3', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, extra characters', 'format', make_move('x', '1Aicky', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, off board', 'format', make_move('o', '5V', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, off board', 'format', make_move('o', '1R', board))
    TEST('dont change after rejected move', expected_board, board)

    # Invalid movement caused by moving on occupied blocks
    board = [[' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ','o',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','x',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    expected_board = board
    TEST('reject move, space occupied', 'occupied', make_move('x', '1C', board))
    TEST('dont change after rejected move', expected_board, board)
    TEST('reject move, space occupied', 'occupied', make_move('o', '3D', board))
    TEST('dont change after rejected move', expected_board, board)

    print('End make_move_TEST')
    print()


def next_player_TEST():
    
    print('Start next_player_TEST')
    TEST('x to o', 'o', next_player('x'))
    TEST('o to x', 'x', next_player('o'))
    print('End next_player_TEST')
    print()


def undo_last_step_TEST(): 
    
    print('Start undo_last_step_TEST')

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('input undo', True, undo_last_step(board,'3B','undo','o'))
    expected_board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('undo last step', expected_board, board)

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('input undo', True, undo_last_step(board,'4B','undo','x'))
    expected_board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('undo last step', expected_board, board)

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('input undo', True, undo_last_step(board,'5C','undo','o'))
    expected_board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '], 
    ['x', 'x', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'o',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('undo last step', expected_board, board)
    
    print('End undo_last_step_TEST')
    print()



def about_to_win_TEST(): 
    
    print('Start about_to_win_TEST')
    
    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'o','o','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('row, about to win', 'o', about_to_win(board))

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'o','o','o','x',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('row, about to win', False, about_to_win(board))

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', 'x','x','x','x',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('row, about to win', 'x', about_to_win(board))

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'x',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('column, about to win', 'x', about_to_win(board))

    board = [[' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', 'o', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', 'o',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ','o',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ','o',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ','x',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' '],
    [' ', ' ', ' ',' ',' ',' ',' ',' ',' ',' ']]
    TEST('diagonal, about to win', 'o', about_to_win(board))

    print('End about_to_win_TEST')
    print()
    



find_winner_TEST()
make_move_TEST()
next_player_TEST()
undo_last_step_TEST()
about_to_win_TEST()
